---
- name: installing tomcat
  hosts: appserver
  become: yes
  tasks:
    - name: update cache
      apt:
        update_cache: yes
      when: ansible_facts['distribution'] == "Ubuntu"
    - name: Installing Java
      ansible.builtin.package:
        name: "{{ java_package_name }}"
        state: present
    - name: Creating tomcat group
      ansible.builtin.group:
        name: "{{ group_name }}"
    - name: Adding tomcat user
      ansible.builtin.user:
        name: "{{ user_name }}"
        create_home: yes
        home: "{{ user_home }}"
        group: "{{ group_name }}"
        shell: "{{ user_shell }}"
        state: present
    - name: get tomcat stats
      stat:
        path: "{{ user_home }}/latest/bin/startup.sh"
      register: tomcat_tar
    - name: Untar tomcat
      unarchive:
        src: "https://www-eu.apache.org/dist/tomcat/tomcat-{{ major_tomcat_version }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        remote_src: yes
        dest: "{{ user_home }}"
    - name: Creating symbolic link
      ansible.builtin.file:
        src: "{{ user_home }}/apache-tomcat-{{ tomcat_version }}"
        dest: "{{ user_home }}/latest"
        state: link
    - name: Changing tomcat ownership
      ansible.builtin.file:
        path: "{{ user_home }}"
        recurse: yes
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        state: directory
    - name: Finding shell files
      find:
        paths: /opt/tomcat/latest/bin/
        file_type: file
        patterns: '*.sh'
      register: shell_files
    - name: Changing shell file permission
      file:
        path: shell_files
        state: directory
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        mode: 'u=x,g=x'
    - name: Creating a tomcat.service with j2
      ansible.builtin.template:
        src: tomcat.service.j2
        dest: /etc/systemd/system/tomcat.service
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
    - name: Reloading daemon and start tomcat
      ansible.builtin.systemd:
        name: "{{ tomcat_service_name }}"
        daemon_reload: yes
        enabled: yes
        state: started
    - name: Restart tomcat
      ansible.builtin.systemd:
        name: tomcat.service
        state: restarted
    - name: User access
      ansible.builtin.template:
        src: tomcat-users.xml.j2
        dest: "{{ user_home }}/latest/conf/tomcat-users.xml"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
    - name: Creating context file
      ansible.builtin.copy:
        src: context.xml 
        dest: "{{ item }}"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      loop:
        - "{{ user_home }}/latest/webapps/manager/META-INF/context.xml"
        - "{{ user_home }}/latest/webapps/host-manager/META-INF/context.xml"
    - name: Restart tomcat
      ansible.builtin.systemd:
        name: tomcat.service
        state: restarted


